-- This file is for use with Corona(R) SDK
--
-- This file is automatically generated with PhysicsEdtior (http://physicseditor.de). Do not edit
--
-- Usage example:
--			local scaleFactor = 1.0
--			local physicsData = (require "shapedefs").physicsData(scaleFactor)
--			local shape = display.newImage("objectname.png")
--			physics.addBody( shape, physicsData:get("objectname") )
--

-- copy needed functions to local scope
local unpack = unpack
local pairs = pairs
local ipairs = ipairs

local M = {}

function M.physicsData(scale)
	local physics = { data =
	{ 
		
		["coin"] = {
                    
                    
                    
                    
                    {
                    pe_fixture_id = "coin", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   5, -14  ,  12, -6  ,  12, 7  ,  4, 15  ,  -5, 15  ,  -12, 8  ,  -12, -4  ,  -6, -14  }
                    }
                    
                    
                    
		}
		
		, 
		["brick_block"] = {
                    
                    
                    
                    
                    {
                    pe_fixture_id = "brick_block", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -16, 16  ,  -16, -15  ,  -14, -16  ,  14, -16  ,  16, -15  ,  16, 16  }
                    }
                    
                    
                    
		}
		
		,
        ["platform_block"] = {
                    
                    
                    
                    
                    {
                    pe_fixture_id = "platform_block", density = 2, friction = 1, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -16, 16  ,  -16, -15  ,  -14, -16  ,  14, -16  ,  16, -15  ,  16, 16  }
                    }
                    
                    
                    
		}
		
		,  
		["mario"] = {
                    
                    
                    
                    
                    {
                    pe_fixture_id = "mario_body", density = 2, friction = 0.1, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   8, -15  ,  8, 15  ,  -8, 15  ,  -8, -15  }
                    }
                    
                    
                    
                     ,
                    
                    {
                    pe_fixture_id = "front_sensor", density = 2, friction = 0, bounce = 0, isSensor=true, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    radius = 3.000,
					position = { -11.1, -1.1 }
                    }
                    
                    
                     ,
                    
                    {
                    pe_fixture_id = "back_sensor", density = 2, friction = 0, bounce = 0, isSensor=true, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    radius = 3.000,
					position = { 11.2, -0.899999999999999 }
                    }
                    
                    
		}
		
	} }

        -- apply scale factor
        local s = scale or 1.0
        for bi,body in pairs(physics.data) do
                for fi,fixture in ipairs(body) do
                    if(fixture.shape) then
                        for ci,coordinate in ipairs(fixture.shape) do
                            fixture.shape[ci] = s * coordinate
                        end
                    else
                        fixture.radius = s * fixture.radius
						fixture.position = { s * fixture.position[1], s * fixture.position[2] }
                    end
                end
        end
	
	function physics:get(name)
		return table.unpack(self.data[name])
	end

	function physics:getFixtureId(name, index)
                return self.data[name][index].pe_fixture_id
	end
	
	return physics;
end

return M

