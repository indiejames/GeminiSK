#!lua

--[[
	Title: Display Types
]]

--[[
	Type: Circle
	A circle object.

	Inherits from: <Shape>
]]

--[[
	Type: Rectangle
	A rectangle object.

	Inherits from: <Shape>
]]

--[[
	Type: Shape
	The parent type for various shapes (circle, rectangle, etc.).
	The Shape type cannot be instantiated directly, rather, 
	sub types of Shape are created via factory methods in the 
	<shape> library.

	Inherits from: <Node>

	See also: <Circle> <Rectangle>
]]
	
--[[	
	Method: Shape:setStrokeColor(r, g, b, a)
	Set the stroke color for the rectangle

	Parameters:
		r - The red component (0 to 1.0) of the color
		g - The green component (0 to 1.0) of the color
		b - The blue component (0 to 1.0) of the color
		a - The alpha component (0 to 1.0) of the color
	
]]


--[[
	Method: Shape:setFillColor(r, g, b, a)
	Set the fill color for the rectangle

	Parameters:
		r - The red component (0 to 1.0) of the color
		g - The green component (0 to 1.0) of the color
		b - The blue component (0 to 1.0) of the color
		a - The alpha component (0 to 1.0) of the color
]]


--[[
	Type: Sprite
	A sprite object.

	Inherits from: <Node>
]]

--[[	
	Method: Sprite:prepare(animation_name)
	Load an animation for the sprite

	Parameters:
		animation - The (optional) name of the animation to use from the sprite set.
		The default animation is used if this parameter is not present.

	
]]
method Sprite:prepare(animation_name)
end
	
--[[	
	Method: Sprite:play
	Start the sprite animation.
]]
method Sprite:play()
end

--[[
	Method: Sprite:pause
	Pause the sprite animation.
]]
method Sprite:pause()
end


--[[
		Type: Emmiter

		Emmitter objects are particle emitters that can be used for effects like flame, smoke, etc.
]]

--[[
  	Method: Emitter.setTarget
  	Sets the target for the emitter.
  
  	Parameters:
		node - The target node for the emitter.
  
  	See Also:
		<Node>
]]
method Emitter.setTarget( node )
end


--[[
	Type: Node
	The basic visual type for Gemini SK.  All visual element are based on
	Node.  Nodes can contain child nodes.  Channging the properties such as 
	poistion or rotation of a Nodes changes the propertis of its children.
	Node properties are always relative to its parent.

	*Note:* Boolean properties prepend "is" to the property name for getting
	the value.  For example, "isHidden".


	Inherits from: <GeminiObject>

	Property: alpha
	The transparency value applied to the Node's contents.  The valid range is
	0 (invisible) to 1 (opaque).

	Property: hidden
	Boolean flag indicating whether or not the Node and it's children are
	rendered.

	Property: name
	The Node's name.

	Property: parent
	The Node's parent Node.  (read only)

	Property: paused
	Boolean value indicating whether or not the actions on the node 
	and its descendantes are processed.

	Property: scene
	The scene that contains the Node. (read only)

	Property: speed
	The speed at which actions of the Node and its descendants actions are
	performed.

	Property: userInteractionEnabled
	Boolean value indicating whether or not the Node receives touch events.

	Property: x
	The x coordinate

	Property: y
	The y coordinate

	Property: xScale
	The scale for the width of the Node and its children.

	Property: yScale
	The scale for the height of the node and its children.

	Property: zPosition
	The height of the Node relative to its parent.  Nodes with higher
	zPositions are rendered after (and therefore on top of) Nodees with lower
	zPositions.

	Property: zRotation
	The roatation of the Node about the z-axis (in radians).



]]

--[[	
	Method: Node:setPostion(x, y)
	Set the position of this Node relative to its parent Node.

	Parameters:
		x - the x coordinate of the position
		y - the y coordinate of the position
]]


--[[	
	Method: Node:delete()
	Remove this object from the display and allow it to be garbage collected
]]


